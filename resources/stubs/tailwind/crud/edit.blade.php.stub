@extends('layouts.{{layout}}')

@section('title', 'Edit {{modelNameSingular}}')

@section('content')
<div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="px-4 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 pt-6">
            <div class="mb-4 sm:mb-0">
                <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Edit {{modelNameSingular}}</h1>
                <nav class="flex mt-2" aria-label="Breadcrumb">
                    <ol class="inline-flex items-center space-x-1 md:space-x-3">
                        <li class="inline-flex items-center">
                            <a href="{{ route('dashboard') }}" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"/>
                                </svg>
                                Dashboard
                            </a>
                        </li>
                        <li>
                            <div class="flex items-center">
                                <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
                                </svg>
                                <a href="{{ route('{{routeName}}.index') }}" class="ml-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">{{modelNamePlural}}</a>
                            </div>
                        </li>
                        <li>
                            <div class="flex items-center">
                                <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
                                </svg>
                                <a href="{{ route('{{routeName}}.show', ${{modelNameSingularLower}}) }}" class="ml-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">View</a>
                            </div>
                        </li>
                        <li aria-current="page">
                            <div class="flex items-center">
                                <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
                                </svg>
                                <span class="ml-1 text-gray-500 dark:text-gray-400">Edit</span>
                            </div>
                        </li>
                    </ol>
                </nav>
            </div>
            <div class="flex space-x-3">
                <a href="{{ route('{{routeName}}.show', ${{modelNameSingularLower}}) }}" 
                   class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-colors">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                    View {{modelNameSingular}}
                </a>
            </div>
        </div>

        <!-- Validation Errors -->
        @if($errors->any())
            <div class="mb-6 bg-red-50 border border-red-200 rounded-lg p-4 dark:bg-red-900/20 dark:border-red-700" role="alert" aria-live="polite">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-red-800 dark:text-red-200">
                            Please correct the following errors:
                        </h3>
                        <div class="mt-2 text-sm text-red-700 dark:text-red-300">
                            <ul class="list-disc list-inside space-y-1">
                                @foreach($errors->all() as $error)
                                    <li>{{ $error }}</li>
                                @endforeach
                            </ul>
                        </div>
                    </div>
                    <div class="ml-auto pl-3">
                        <button type="button" class="inline-flex text-red-400 hover:text-red-600 dark:text-red-300 dark:hover:text-red-100" onclick="this.parentElement.parentElement.parentElement.remove()">
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        @endif

        <!-- Success Message -->
        @if(session('success'))
            <div class="mb-6 bg-green-50 border border-green-200 rounded-lg p-4 dark:bg-green-900/20 dark:border-green-700" role="alert" aria-live="polite">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-green-800 dark:text-green-200">{{ session('success') }}</p>
                    </div>
                    <div class="ml-auto pl-3">
                        <button type="button" class="inline-flex text-green-400 hover:text-green-600 dark:text-green-300 dark:hover:text-green-100" onclick="this.parentElement.parentElement.parentElement.remove()">
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        @endif

        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
            <!-- Main Form -->
            <div class="lg:col-span-3">
                <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                            </svg>
                            Edit {{modelNameSingular}} Information
                        </h2>
                    </div>
                    
                    <form action="{{ route('{{routeName}}.update', ${{modelNameSingularLower}}) }}" 
                          method="POST" 
                          enctype="multipart/form-data"
                          id="{{modelNameSingularLower}}-form"
                          novalidate
                          class="space-y-6">
                        @csrf
                        @method('PUT')
                        
                        <div class="px-6 py-6">
                            <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                                {{#formFields}}
                                <div class="{{#fullWidth}}sm:col-span-6{{/fullWidth}}{{^fullWidth}}sm:col-span-{{colSize}}{{/fullWidth}}">
                                    @include('components.form-field', [
                                        'name' => '{{name}}',
                                        'label' => '{{label}}',
                                        'type' => '{{type}}',
                                        'value' => old('{{name}}', ${{modelNameSingularLower}}->{{name}}),
                                        'required' => {{required}},
                                        'placeholder' => '{{placeholder}}',
                                        'help' => '{{helpText}}',
                                        'options' => {{options}},
                                        'attributes' => {{attributes}},
                                        'model' => ${{modelNameSingularLower}}
                                    ])
                                </div>
                                {{/formFields}}
                            </div>
                        </div>
                        
                        <div class="px-6 py-4 bg-gray-50 dark:bg-gray-700/50 border-t border-gray-200 dark:border-gray-700 flex flex-col sm:flex-row sm:justify-between">
                            <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 mb-3 sm:mb-0">
                                <button type="submit" 
                                        id="submit-btn"
                                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-colors">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                    </svg>
                                    <span class="btn-text">Update {{modelNameSingular}}</span>
                                    <svg class="animate-spin ml-2 h-4 w-4 text-white hidden" id="loading-spinner" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                </button>
                                
                                <button type="submit" 
                                        name="action" 
                                        value="save_and_continue"
                                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 dark:focus:ring-offset-gray-800 transition-colors">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                    </svg>
                                    Save & Continue Editing
                                </button>
                            </div>
                            
                            <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3">
                                <button type="button" 
                                        onclick="resetForm()"
                                        class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-colors">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                    </svg>
                                    Reset Changes
                                </button>
                                
                                <a href="{{ route('{{routeName}}.show', ${{modelNameSingularLower}}) }}" 
                                   class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-colors">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                    </svg>
                                    Cancel
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="space-y-6">
                <!-- Record Info Card -->
                <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                            Record Information
                        </h3>
                    </div>
                    <div class="px-6 py-6 space-y-4">
                        <div>
                            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">ID</dt>
                            <dd class="mt-1 text-sm text-gray-900 dark:text-gray-100 font-mono">
                                {{ ${{modelNameSingularLower}}->{{primaryKey}} }}
                            </dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Created</dt>
                            <dd class="mt-1 text-sm text-gray-900 dark:text-gray-100">
                                <time datetime="{{ ${{modelNameSingularLower}}->created_at->toISOString() }}" 
                                      title="{{ ${{modelNameSingularLower}}->created_at->format('l, F j, Y g:i A') }}">
                                    {{ ${{modelNameSingularLower}}->created_at->diffForHumans() }}
                                </time>
                            </dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Last Updated</dt>
                            <dd class="mt-1 text-sm text-gray-900 dark:text-gray-100">
                                <time datetime="{{ ${{modelNameSingularLower}}->updated_at->toISOString() }}" 
                                      title="{{ ${{modelNameSingularLower}}->updated_at->format('l, F j, Y g:i A') }}">
                                    {{ ${{modelNameSingularLower}}->updated_at->diffForHumans() }}
                                </time>
                            </dd>
                        </div>
                        {{#hasTimestamps}}
                        @if(${{modelNameSingularLower}}->deleted_at)
                            <div>
                                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Deleted</dt>
                                <dd class="mt-1 text-sm text-red-600 dark:text-red-400">
                                    <time datetime="{{ ${{modelNameSingularLower}}->deleted_at->toISOString() }}" 
                                          title="{{ ${{modelNameSingularLower}}->deleted_at->format('l, F j, Y g:i A') }}">
                                        {{ ${{modelNameSingularLower}}->deleted_at->diffForHumans() }}
                                    </time>
                                </dd>
                            </div>
                        @endif
                        {{/hasTimestamps}}
                    </div>
                </div>

                <!-- Change History -->
                {{#hasRevisionHistory}}
                <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                            Change History
                        </h3>
                    </div>
                    <div class="px-6 py-6">
                        @if(${{modelNameSingularLower}}->revisions->count() > 0)
                            <div class="flow-root">
                                <ul role="list" class="-mb-8">
                                    @foreach(${{modelNameSingularLower}}->revisions->take(5) as $revision)
                                        <li>
                                            <div class="relative pb-8">
                                                @if(!$loop->last)
                                                    <span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200 dark:bg-gray-700" aria-hidden="true"></span>
                                                @endif
                                                <div class="relative flex space-x-3">
                                                    <div>
                                                        <span class="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center ring-8 ring-white dark:ring-gray-800">
                                                            <svg class="h-4 w-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                                                            </svg>
                                                        </span>
                                                    </div>
                                                    <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                                        <div>
                                                            <p class="text-sm text-gray-500 dark:text-gray-400">
                                                                {{ $revision->userResponsible()?->name ?? 'System' }}
                                                                {{ $revision->historyType() }}
                                                                @if($revision->fieldName())
                                                                    <span class="font-medium">{{ $revision->fieldName() }}</span>
                                                                @endif
                                                            </p>
                                                            @if($revision->oldValue() && $revision->newValue())
                                                                <p class="text-xs text-gray-400 dark:text-gray-500 mt-1">
                                                                    <span class="line-through">{{ Str::limit($revision->oldValue(), 20) }}</span>
                                                                    →
                                                                    <span>{{ Str::limit($revision->newValue(), 20) }}</span>
                                                                </p>
                                                            @endif
                                                        </div>
                                                        <div class="text-right text-sm whitespace-nowrap text-gray-500 dark:text-gray-400">
                                                            <time datetime="{{ $revision->created_at->toISOString() }}">
                                                                {{ $revision->created_at->diffForHumans() }}
                                                            </time>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </li>
                                    @endforeach
                                </ul>
                            </div>
                            
                            @if(${{modelNameSingularLower}}->revisions->count() > 5)
                                <div class="mt-4 text-center">
                                    <a href="{{ route('{{routeName}}.revisions', ${{modelNameSingularLower}}) }}" 
                                       class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
                                        View all {{ ${{modelNameSingularLower}}->revisions->count() }} changes
                                    </a>
                                </div>
                            @endif
                        @else
                            <p class="text-sm text-gray-500 dark:text-gray-400">No revision history available</p>
                        @endif
                    </div>
                </div>
                {{/hasRevisionHistory}}

                <!-- Quick Actions Card -->
                <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                            </svg>
                            Quick Actions
                        </h3>
                    </div>
                    <div class="px-6 py-6 space-y-3">
                        <button type="button" 
                                onclick="duplicateRecord()"
                                class="w-full inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-colors">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                            </svg>
                            Duplicate
                        </button>
                        
                        <button type="button" 
                                onclick="exportRecord()"
                                class="w-full inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-colors">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                            </svg>
                            Export
                        </button>
                        
                        @can('delete', ${{modelNameSingularLower}})
                            <button type="button" 
                                    onclick="confirmDelete('{{ ${{modelNameSingularLower}}->{{primaryKey}} }}', '{{ addslashes(${{modelNameSingularLower}}->{{displayField}}) }}')"
                                    class="w-full inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800 transition-colors">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                </svg>
                                Delete {{modelNameSingular}}
                            </button>
                        @endcan
                    </div>
                </div>

                <!-- Auto-save Status -->
                <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white flex items-center">
                            <svg class="w-5 h-5 mr-2 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
                            </svg>
                            Auto-save
                        </h3>
                    </div>
                    <div class="px-6 py-6">
                        <div class="flex items-center justify-between">
                            <label for="auto-save-toggle" class="text-sm font-medium text-gray-700 dark:text-gray-300">
                                Enable auto-save
                            </label>
                            <button type="button" 
                                    id="auto-save-toggle"
                                    class="bg-blue-600 relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800" 
                                    role="switch" 
                                    aria-checked="true">
                                <span class="sr-only">Enable auto-save</span>
                                <span class="translate-x-5 pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out" id="toggle-button"></span>
                            </button>
                        </div>
                        <div id="auto-save-status" class="mt-2 text-sm text-emerald-600 dark:text-emerald-400">
                            Auto-save is enabled
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Unsaved Changes Modal -->
<div class="fixed inset-0 z-50 overflow-y-auto hidden" id="unsavedChangesModal" aria-labelledby="unsavedChangesModalLabel" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <div class="sm:flex sm:items-start">
                <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100 dark:bg-yellow-900/20 sm:mx-0 sm:h-10 sm:w-10">
                    <svg class="h-6 w-6 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                    </svg>
                </div>
                <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white" id="unsavedChangesModalLabel">
                        Unsaved Changes
                    </h3>
                    <div class="mt-2">
                        <p class="text-sm text-gray-500 dark:text-gray-400">
                            You have unsaved changes. Are you sure you want to leave without saving?
                        </p>
                    </div>
                </div>
            </div>
            <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                <button type="button" 
                        onclick="saveForm()"
                        class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 sm:ml-3 sm:w-auto sm:text-sm transition-colors">
                    Save & Continue
                </button>
                <button type="button" 
                        id="leave-anyway"
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm transition-colors">
                    Leave Anyway
                </button>
                <button type="button" 
                        onclick="closeModal('unsavedChangesModal')"
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 sm:mt-0 sm:w-auto sm:text-sm transition-colors">
                    Stay
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="fixed inset-0 z-50 overflow-y-auto hidden" id="deleteModal" aria-labelledby="deleteModalLabel" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <div class="sm:flex sm:items-start">
                <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 dark:bg-red-900/20 sm:mx-0 sm:h-10 sm:w-10">
                    <svg class="h-6 w-6 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                    </svg>
                </div>
                <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white" id="deleteModalLabel">
                        Confirm Deletion
                    </h3>
                    <div class="mt-2">
                        <p class="text-sm text-gray-500 dark:text-gray-400">
                            Are you sure you want to delete <strong id="deleteItemName" class="text-gray-900 dark:text-white"></strong>?
                        </p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">This action cannot be undone.</p>
                    </div>
                </div>
            </div>
            <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                <button type="button" 
                        id="confirmDeleteBtn"
                        class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800 sm:ml-3 sm:w-auto sm:text-sm transition-colors">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                    </svg>
                    Delete
                </button>
                <button type="button" 
                        onclick="closeModal('deleteModal')"
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 sm:mt-0 sm:w-auto sm:text-sm transition-colors">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>
@endsection

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('{{modelNameSingularLower}}-form');
    const submitBtn = document.getElementById('submit-btn');
    const autoSaveToggle = document.getElementById('auto-save-toggle');
    const autoSaveStatus = document.getElementById('auto-save-status');
    
    let formChanged = false;
    let autoSaveInterval;
    let originalFormData = {};
    let autoSaveEnabled = true;

    // Store original form data
    const formData = new FormData(form);
    for (let [key, value] of formData.entries()) {
        originalFormData[key] = value;
    }

    // Initialize form
    initializeForm();
    setupValidation();
    setupAutoSave();
    setupUnsavedChangesWarning();

    function initializeForm() {
        // Setup file upload previews
        setupFileUploads();
        
        // Setup character counters
        setupCharacterCounters();
        
        // Setup dependent fields
        setupDependentFields();
        
        // Setup auto-save toggle
        setupAutoSaveToggle();
    }

    function setupAutoSaveToggle() {
        autoSaveToggle.addEventListener('click', function() {
            autoSaveEnabled = !autoSaveEnabled;
            
            if (autoSaveEnabled) {
                this.classList.remove('bg-gray-200');
                this.classList.add('bg-blue-600');
                this.querySelector('#toggle-button').classList.remove('translate-x-0');
                this.querySelector('#toggle-button').classList.add('translate-x-5');
                this.setAttribute('aria-checked', 'true');
                
                startAutoSave();
                autoSaveStatus.textContent = 'Auto-save is enabled';
                autoSaveStatus.className = 'mt-2 text-sm text-emerald-600 dark:text-emerald-400';
            } else {
                this.classList.remove('bg-blue-600');
                this.classList.add('bg-gray-200');
                this.querySelector('#toggle-button').classList.remove('translate-x-5');
                this.querySelector('#toggle-button').classList.add('translate-x-0');
                this.setAttribute('aria-checked', 'false');
                
                stopAutoSave();
                autoSaveStatus.textContent = 'Auto-save is disabled';
                autoSaveStatus.className = 'mt-2 text-sm text-gray-500 dark:text-gray-400';
            }
        });
    }

    function setupValidation() {
        // Real-time validation
        form.querySelectorAll('input, select, textarea').forEach(field => {
            field.addEventListener('blur', function() {
                validateField(this);
            });
            
            field.addEventListener('input', function() {
                formChanged = true;
                clearFieldError(this);
                
                // Debounced validation
                clearTimeout(this.validationTimeout);
                this.validationTimeout = setTimeout(() => {
                    validateField(this);
                }, 500);
            });
        });

        // Form submission validation
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (validateForm()) {
                submitForm(this);
            }
        });
    }

    function validateField(field) {
        const fieldName = field.name;
        const value = field.value.trim();
        const isRequired = field.hasAttribute('required');
        
        // Clear previous validation state
        field.classList.remove('border-green-300', 'border-red-300');
        field.classList.add('border-gray-300', 'dark:border-gray-600');
        
        // Basic required validation
        if (isRequired && !value) {
            showFieldError(field, 'This field is required');
            return false;
        }
        
        // Show success state
        showFieldSuccess(field);
        return true;
    }

    function validateForm() {
        let isValid = true;
        const fields = form.querySelectorAll('input, select, textarea');
        
        fields.forEach(field => {
            if (!validateField(field)) {
                isValid = false;
            }
        });
        
        // Focus first invalid field
        if (!isValid) {
            const firstInvalid = form.querySelector('.border-red-300');
            if (firstInvalid) {
                firstInvalid.focus();
                firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }
        
        return isValid;
    }

    function submitForm(form) {
        // Show loading state
        const spinner = document.getElementById('loading-spinner');
        const btnText = document.querySelector('.btn-text');
        
        submitBtn.disabled = true;
        spinner.classList.remove('hidden');
        btnText.textContent = 'Updating...';
        
        // Submit form
        const formData = new FormData(form);
        
        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                formChanged = false;
                
                showAlert('success', data.message || '{{modelNameSingular}} updated successfully');
                
                // Redirect based on action
                const action = form.querySelector('[name="action"]:checked')?.value || 
                              (event.submitter && event.submitter.value) || 'default';
                
                setTimeout(() => {
                    if (action === 'save_and_continue') {
                        location.reload();
                    } else {
                        window.location.href = data.redirect || '{{ route('{{routeName}}.show', ${{modelNameSingularLower}}) }}';
                    }
                }, 1500);
            } else {
                throw new Error(data.message || 'An error occurred');
            }
        })
        .catch(error => {
            showAlert('error', error.message || 'An error occurred while updating the {{modelNameSingular}}');
        })
        .finally(() => {
            // Reset button state
            submitBtn.disabled = false;
            spinner.classList.add('hidden');
            btnText.textContent = 'Update {{modelNameSingular}}';
        });
    }

    function setupAutoSave() {
        if (autoSaveEnabled) {
            startAutoSave();
        }
    }

    function startAutoSave() {
        autoSaveInterval = setInterval(() => {
            if (formChanged && autoSaveEnabled) {
                saveDraft();
            }
        }, 30000); // Save every 30 seconds
    }

    function stopAutoSave() {
        if (autoSaveInterval) {
            clearInterval(autoSaveInterval);
        }
    }

    function saveDraft() {
        const formData = new FormData(form);
        
        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-Auto-Save': 'true'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                formChanged = false;
                autoSaveStatus.textContent = 'Auto-saved ' + new Date().toLocaleTimeString();
                autoSaveStatus.className = 'mt-2 text-sm text-emerald-600 dark:text-emerald-400';
            }
        })
        .catch(error => {
            console.error('Auto-save failed:', error);
            autoSaveStatus.textContent = 'Auto-save failed';
            autoSaveStatus.className = 'mt-2 text-sm text-red-600 dark:text-red-400';
        });
    }

    function setupUnsavedChangesWarning() {
        window.addEventListener('beforeunload', function(e) {
            if (formChanged) {
                e.preventDefault();
                e.returnValue = '';
                return '';
            }
        });

        // Handle navigation links
        document.querySelectorAll('a[href]').forEach(link => {
            link.addEventListener('click', function(e) {
                if (formChanged && !this.href.includes('#')) {
                    e.preventDefault();
                    showModal('unsavedChangesModal');
                    
                    document.getElementById('leave-anyway').onclick = () => {
                        formChanged = false;
                        window.location.href = this.href;
                    };
                }
            });
        });
    }

    function setupFileUploads() {
        form.querySelectorAll('input[type="file"]').forEach(fileInput => {
            setupFileUpload(fileInput);
        });
    }

    function setupFileUpload(fileInput) {
        fileInput.addEventListener('change', function() {
            formChanged = true;
            // File upload preview logic would go here
        });
    }

    function setupCharacterCounters() {
        form.querySelectorAll('textarea[maxlength], input[maxlength]').forEach(field => {
            const maxLength = parseInt(field.getAttribute('maxlength'));
            if (maxLength) {
                const counter = document.createElement('div');
                counter.className = 'text-right text-xs text-gray-500 dark:text-gray-400 mt-1';
                field.parentNode.appendChild(counter);
                
                function updateCounter() {
                    const remaining = maxLength - field.value.length;
                    counter.textContent = `${field.value.length}/${maxLength} characters`;
                    
                    counter.className = 'text-right text-xs mt-1';
                    if (remaining < maxLength * 0.1) {
                        counter.classList.add('text-red-500', 'dark:text-red-400');
                    } else if (remaining < maxLength * 0.2) {
                        counter.classList.add('text-yellow-500', 'dark:text-yellow-400');
                    } else {
                        counter.classList.add('text-gray-500', 'dark:text-gray-400');
                    }
                }
                
                field.addEventListener('input', updateCounter);
                updateCounter();
            }
        });
    }

    function setupDependentFields() {
        // Setup cascading dropdowns and dependent field logic
        {{#dependentFields}}
        const {{parentField}} = form.querySelector('[name="{{parentField}}"]');
        const {{childField}} = form.querySelector('[name="{{childField}}"]');
        
        if ({{parentField}} && {{childField}}) {
            {{parentField}}.addEventListener('change', function() {
                updateDependentField('{{parentField}}', '{{childField}}', this.value);
            });
        }
        {{/dependentFields}}
    }

    function updateDependentField(parentField, childField, parentValue) {
        const childSelect = form.querySelector(`[name="${childField}"]`);
        if (!childSelect) return;
        
        // Show loading state
        childSelect.disabled = true;
        childSelect.innerHTML = '<option>Loading...</option>';
        
        // Fetch dependent options
        fetch(`/api/dependent-options/${parentField}/${childField}/${parentValue}`)
            .then(response => response.json())
            .then(data => {
                childSelect.innerHTML = '<option value="">Choose...</option>';
                data.forEach(option => {
                    childSelect.innerHTML += `<option value="${option.value}">${option.label}</option>`;
                });
                childSelect.disabled = false;
            })
            .catch(error => {
                console.error('Error loading dependent options:', error);
                childSelect.innerHTML = '<option value="">Error loading options</option>';
                childSelect.disabled = false;
            });
    }

    // Helper functions
    function showFieldError(field, message) {
        field.classList.remove('border-gray-300', 'dark:border-gray-600', 'border-green-300');
        field.classList.add('border-red-300');
        
        let feedback = field.parentNode.querySelector('.field-error');
        if (!feedback) {
            feedback = document.createElement('div');
            feedback.className = 'field-error text-sm text-red-600 dark:text-red-400 mt-1';
            field.parentNode.appendChild(feedback);
        }
        feedback.textContent = message;
    }

    function showFieldSuccess(field) {
        field.classList.remove('border-gray-300', 'dark:border-gray-600', 'border-red-300');
        field.classList.add('border-green-300');
        
        const feedback = field.parentNode.querySelector('.field-error');
        if (feedback) {
            feedback.remove();
        }
    }

    function clearFieldError(field) {
        field.classList.remove('border-red-300');
        field.classList.add('border-gray-300', 'dark:border-gray-600');
        const feedback = field.parentNode.querySelector('.field-error');
        if (feedback) {
            feedback.remove();
        }
    }
});

// Global functions
function resetForm() {
    if (confirm('Are you sure you want to reset the form? All unsaved changes will be lost.')) {
        location.reload();
    }
}

function saveForm() {
    document.getElementById('{{modelNameSingularLower}}-form').dispatchEvent(new Event('submit'));
}

// Quick actions
function duplicateRecord() {
    window.location.href = `{{ route('{{routeName}}.create') }}?duplicate={{ ${{modelNameSingularLower}}->{{primaryKey}} }}`;
}

function exportRecord() {
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '{{ route('{{routeName}}.export') }}';
    
    const csrfToken = document.createElement('input');
    csrfToken.type = 'hidden';
    csrfToken.name = '_token';
    csrfToken.value = document.querySelector('meta[name="csrf-token"]').content;
    form.appendChild(csrfToken);
    
    const idInput = document.createElement('input');
    idInput.type = 'hidden';
    idInput.name = 'id';
    idInput.value = '{{ ${{modelNameSingularLower}}->{{primaryKey}} }}';
    form.appendChild(idInput);
    
    document.body.appendChild(form);
    form.submit();
    document.body.removeChild(form);
}

// Delete confirmation
let deleteId = null;

function confirmDelete(id, name) {
    deleteId = id;
    document.getElementById('deleteItemName').textContent = name;
    showModal('deleteModal');
}

document.getElementById('confirmDeleteBtn')?.addEventListener('click', function() {
    if (deleteId) {
        performDelete(deleteId);
    }
});

function performDelete(id) {
    showLoading();
    
    fetch(`{{ route('{{routeName}}.index') }}/${id}`, {
        method: 'DELETE',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        hideLoading();
        closeModal('deleteModal');
        
        if (data.success) {
            showAlert('success', data.message || '{{modelNameSingular}} deleted successfully');
            setTimeout(() => window.location.href = '{{ route('{{routeName}}.index') }}', 1000);
        } else {
            showAlert('error', data.message || 'Error deleting {{modelNameSingular}}');
        }
    })
    .catch(error => {
        hideLoading();
        closeModal('deleteModal');
        showAlert('error', 'An error occurred while deleting the {{modelNameSingular}}');
        console.error('Error:', error);
    });
}

// Modal helpers
function showModal(modalId) {
    document.getElementById(modalId).classList.remove('hidden');
    document.body.classList.add('overflow-hidden');
}

function closeModal(modalId) {
    document.getElementById(modalId).classList.add('hidden');
    document.body.classList.remove('overflow-hidden');
}

// Loading state
function showLoading() {
    document.body.style.cursor = 'wait';
    document.body.style.pointerEvents = 'none';
}

function hideLoading() {
    document.body.style.cursor = '';
    document.body.style.pointerEvents = '';
}

// Alert helper
function showAlert(type, message) {
    const alertTypes = {
        'success': 'bg-green-50 border-green-200 text-green-800 dark:bg-green-900/20 dark:border-green-700 dark:text-green-200',
        'error': 'bg-red-50 border-red-200 text-red-800 dark:bg-red-900/20 dark:border-red-700 dark:text-red-200',
        'warning': 'bg-yellow-50 border-yellow-200 text-yellow-800 dark:bg-yellow-900/20 dark:border-yellow-700 dark:text-yellow-200',
        'info': 'bg-blue-50 border-blue-200 text-blue-800 dark:bg-blue-900/20 dark:border-blue-700 dark:text-blue-200'
    };

    const alertDiv = document.createElement('div');
    alertDiv.className = `mb-6 border rounded-lg p-4 ${alertTypes[type]} alert-dismissible`;
    alertDiv.setAttribute('role', 'alert');
    alertDiv.innerHTML = `
        <div class="flex">
            <div class="ml-3">
                <p>${message}</p>
            </div>
            <div class="ml-auto pl-3">
                <button type="button" class="inline-flex hover:opacity-75" onclick="this.parentElement.parentElement.parentElement.remove()">
                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                    </svg>
                </button>
            </div>
        </div>
    `;
    
    const container = document.querySelector('.min-h-screen > .px-4');
    container.insertBefore(alertDiv, container.children[2]);
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}
</script>
@endpush